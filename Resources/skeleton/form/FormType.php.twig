<?php

namespace {{ namespace }}\Form{{ entity_namespace ? '\\' ~ entity_namespace : '' }}\Type;

{% block use_statements %}
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
{% endblock use_statements %}

{%- set hasDateField = false %}

/**
 * {{ entity_class }} type.
 *
 * @author JoÃ£o Paulo Cercal <sistemas@cekurte.com>
 * @version 0.1
 */
{% block class_definition %}
class {{ form_class }} extends AbstractType
{% endblock class_definition %}
{
{% block class_body %}
    /**
     * {@inheritdoc}
{% include 'crud/actions/author.php.twig' %}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        if ($options['search'] === true) {
            {% for field in fields -%}
                {{ "\n" }}
                {%- if field.type != 'text' or field.fieldName not in ['picture', 'image', 'thumb', 'thumbnail', 'file', 'filename'] -%}
                    {% if field.type in ['date'] %}
            $builder->add('{{ field.fieldName }}From', 'date', array(
                'mapped'    => false,
                'required'  => false,
                'widget'    => 'single_text',
                'format'    => $this->getDatePattern(),
                'attr'      => array(
                    'class'             => 'datepicker',
                    'data-date-format'  => $this->getDateWidgetPattern(),
                    'data-date-language'=> $this->getDateLanguage(),
                ),
            ));
            $builder->add('{{ field.fieldName }}To', 'date', array(
                'mapped'    => false,
                'required'  => false,
                'widget'    => 'single_text',
                'format'    => $this->getDatePattern(),
                'attr'      => array(
                    'class'             => 'datepicker',
                    'data-date-format'  => $this->getDateWidgetPattern(),
                    'data-date-language'=> $this->getDateLanguage(),
                ),
            ));
                    {% else %}
            $builder->add('{{ field.fieldName }}')->setRequired(false);
                    {% endif %}
                {%- endif -%}
            {%- endfor %}

        } else {

            $builder
            {%- for field in fields %}

                {% if field.type == 'text' -%}
                ->add('{{ field.fieldName }}', 'textarea', array(
                    'attr'  => array(
                        'class' => 'ckeditor'
                    )
                ))
                {%- elseif field.fieldName in ['picture', 'image', 'thumb', 'thumbnail', 'file', 'filename'] -%}
                ->add('{{ field.fieldName }}', 'hidden', array(
                    'attr'  => array(
                        'class' => '{{ entity_class|lower }}_{{ field.fieldName }}'
                    )
                ))
                {%- elseif field.type in ['date'] -%}
                {%- set hasDateField = true -%}
                ->add('{{ field.fieldName }}', null, array(
                    'widget'    => 'single_text',
                    'format'    => $this->getDatePattern(),
                    'attr'      => array(
                        'class'             => 'datepicker',
                        'data-date-format'  => $this->getDateWidgetPattern(),
                        'data-date-language'=> $this->getDateLanguage(),
                    ),
                ))
                {%- else -%}
                ->add('{{ field.fieldName }}')
                {%- endif %}

            {%- endfor %}

            ;
        }
    }

{% if hasDateField == true %}
    /**
     * Get a date field pattern
     *
     * @param string|null $locale
     * @return string
{% include 'crud/actions/author.php.twig' %}
     */
    public function getDatePattern($locale = null)
    {
        $formatter = new \IntlDateFormatter(
            is_null($locale) ? \Locale::getDefault() : $locale,
            \IntlDateFormatter::SHORT,
            \IntlDateFormatter::NONE
        );

        return $formatter->getPattern();
    }

    /**
     * Get a date field pattern
     *
     * @param string|null $locale
     * @return string
{% include 'crud/actions/author.php.twig' %}
     */
    public function getDateWidgetPattern($locale = null)
    {
        return strtolower($this->getDatePattern($locale));
    }

    /**
     * Get the current locale language
     *
     * @param string|null $locale
     * @return string
{% include 'crud/actions/author.php.twig' %}
     */
    public function getDateLanguage($locale = null)
    {
        return str_replace('_', '-', is_null($locale) ? \Locale::getDefault() : $locale);
    }
{% endif %}

    /**
     * {@inheritdoc}
{% include 'crud/actions/author.php.twig' %}
     */
    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $resolver->setDefaults(array(
            'search'     => false,
            'data_class' => '{{ namespace }}\Entity{{ entity_namespace ? '\\' ~ entity_namespace : '' }}\{{ entity_class }}'
        ));
    }

    /**
     * {@inheritdoc}
{% include 'crud/actions/author.php.twig' %}
     */
    public function getName()
    {
        return '{{ form_type_name }}';
    }
{% endblock class_body %}
}
