
    /**
{% block phpdoc_method_header %}
     * Find and display a form to edit an existing resource.
{% endblock phpdoc_method_header %}
     *
{% block phpdoc_method_annotations %}
{% if 'annotation' == format %}
     * @Route("/{id}/edit", name="{{ route_name_prefix }}_edit")
     * @Method("GET")
     * @Template()
     * @Secure(roles="ROLE_{{ bundle | slice(0, -6) | upper }}_{{ entity | upper }}_UPDATE, ROLE_ADMIN")
{% endif %}
{% endblock phpdoc_method_annotations %}
     *
     * @param Request $request
     * @param int $id
     * @return array
     */
{% block method_definition %}
    public function editAction(Request $request, $id)
{% endblock method_definition %}
    {
{% block method_body %}
        try {

            $data = $this->getManager()->getResource($id);

        } catch (NotFoundHttpException $e) {

            $response = $this->createResponseWhenResourceCannotBeUpdated($e, $this->getAcceptResponse($request));

            if ($response instanceof JsonResponse) {
                return $response;
            }

            return $this->redirect($this->generateUrl('{{ route_name_prefix }}'));
        }

        $editForm = $this->createForm(new {{ entity }}FormType(), $data, array(
            'method' => 'PUT'
        ));
{% endblock method_body %}

{% block method_return %}
{% if 'annotation' == format %}
        return array(
            'data'        => $data,
            'edit_form'   => $editForm->createView(),
            'delete_form' => $this->createDeleteForm()->createView(),
        );
{% else %}
        return $this->render('{{ bundle }}:{{ entity|replace({'\\': '/'}) }}:edit.html.twig', array(
            'data'        => $data,
            'edit_form'   => $editForm->createView(),
            'delete_form' => $this->createDeleteForm()->createView(),
        ));
{% endif %}
{% endblock method_return %}
    }
