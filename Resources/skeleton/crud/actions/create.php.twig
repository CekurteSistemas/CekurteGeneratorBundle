
    /**
{% block phpdoc_method_header %}
     * Create a new resource.
{% endblock phpdoc_method_header %}
     *
{% block phpdoc_method_annotations %}
{% if 'annotation' == format %}
     * @Route("/", name="{{ route_name_prefix }}_create")
     * @Method("POST")
     * @Template("{{ bundle }}:{{ entity }}:new.html.twig")
     * @Secure(roles="ROLE_{{ bundle | slice(0, -6) | upper }}_{{ entity | upper }}_CREATE, ROLE_ADMIN")
{% endif %}
{% endblock phpdoc_method_annotations %}
     *
     * @param Request $request
     * @return array|JsonResponse
     */
{% block method_definition %}
    public function createAction(Request $request)
{% endblock method_definition %}
    {
{% block method_body %}
        $form = $this->createForm(new {{ entity }}FormType(), new {{ entity }}());

        if (!$form->handleRequest($request)->isValid()) {
            return $this->createResponseWhenFormIsInvalid($form, $this->getAcceptResponse($request));
        }

        try {

            $result = $this->getManager()->createResource($form->getData());

            $response = $this->createResponseWhenResourceWasCreated($result->getId(), $this->getAcceptResponse($request));

            if ($response instanceof JsonResponse) {
                return $response;
            }

            return $this->redirect($this->generateUrl('{{ route_name_prefix }}_show', array(
                'id' => $result->getId()
            )));

        } catch (\Exception $e) {

            $response = $this->createResponseWhenResourceCannotBeCreated($e, $this->getAcceptResponse($request));

            if ($response instanceof JsonResponse) {
                return $response;
            }

            return array(
                'form' => $form->createView(),
            );
        }
{% endblock method_body %}
{% block method_return %}{% endblock method_return %}
    }
