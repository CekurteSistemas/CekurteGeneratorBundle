
    /**
{% block phpdoc_method_header %}
     * Find and display a resource.
{% endblock phpdoc_method_header %}
     *
{% block phpdoc_method_annotations %}
{% if 'annotation' == format %}
     * @Route("/{id}", requirements={"id": "\d+"}, name="{{ route_name_prefix }}_show")
     * @Method("GET")
     * @Template()
     * @Secure(roles="ROLE_{{ bundle | slice(0, -6) | upper }}_{{ entity | upper }}_RETRIEVE, ROLE_ADMIN")
{% endif %}
{% endblock phpdoc_method_annotations %}
     *
     * @param Request $request
     * @param int $id
     * @return array|JsonResponse
     */
{% block method_definition %}
    public function showAction(Request $request, $id)
{% endblock method_definition %}
    {
{% block method_body %}
        try {

            $data = $this->getManager()->getResource($id);

        } catch (NotFoundHttpException $e) {

            $response = $this->createResponseWhenResourceCannotBeRetrived($e, $this->getAcceptResponse($request));

            if ($response instanceof JsonResponse) {
                return $response;
            }

            return $this->redirect($this->generateUrl('{{ route_name_prefix }}'));
        }

        $response = $this->createResponse($data, $this->getAcceptResponse($request));

        if ($response instanceof JsonResponse) {
            return $response;
        }

        if ($this->get('security.context')->isGranted('ROLE_SUPER_ADMIN')) {
            $response['loggable'] = $this->getManager()->getResourceLoggable($data);
        }
{% if 'delete' in actions %}

        $response['delete_form'] = $this->createDeleteForm()->createView();
{% endif %}
{% endblock method_body %}

{% block method_return %}
{% if 'annotation' == format %}
        return $response;
{% else %}
        return $this->render('{{ bundle }}:{{ entity|replace({'\\': '/'}) }}:show.html.twig', $response);
{% endif %}
{% endblock method_return %}
    }
