
    /**
{% block phpdoc_method_header %}
     * Delete an existing resource.
{% endblock phpdoc_method_header %}
     *
{% block phpdoc_method_annotations %}
{% if 'annotation' == format %}
     * @Route("/{id}", requirements={"id": "\d+"}, name="{{ route_name_prefix }}_delete")
     * @Method("DELETE")
     * @Secure(roles="ROLE_{{ bundle | slice(0, -6) | upper }}_{{ entity | upper }}_DELETE, ROLE_ADMIN")
{% endif %}
{% endblock phpdoc_method_annotations %}
     *
     * @param Request $request
     * @param int $id
     * @return RedirectResponse
     */
{% block method_definition %}
    public function deleteAction(Request $request, $id)
{% endblock method_definition %}
    {
{% block method_body %}
        try {

            $this->getManager()->deleteResource($id);

            $response = $this->createResponseWhenResourceWasDeleted($id, $this->getAcceptResponse($request));

            if ($response instanceof JsonResponse) {
                return $response;
            }

            return $this->redirect($this->generateUrl('{{ route_name_prefix }}'));

        } catch (\Exception $e) {

            $response = $this->createResponseWhenResourceCannotBeDeleted($e, $this->getAcceptResponse($request));

            if ($response instanceof JsonResponse) {
                return $response;
            }

            if ($e instanceof NotFoundHttpException) {
                return $this->redirect($this->generateUrl('{{ route_name_prefix }}'));
            }

            return $this->redirect($this->generateUrl('{{ route_name_prefix }}_show', array(
                'id' => $id
            )));
        }
{% endblock method_body %}
{% block method_return %}{% endblock method_return %}
    }
