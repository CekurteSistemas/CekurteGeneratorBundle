<?php

namespace {{ namespace }}\Entity\Repository;

{% block use_statements %}
use Doctrine\ORM\EntityRepository;
use {{ namespace }}\Entity\{{ entity_class }};
{% endblock use_statements %}

/**
 * {{ entity_class }} Repository.
 *
 * @author JoÃ£o Paulo Cercal <sistemas@cekurte.com>
 * @version 0.1
 */
{% block class_definition %}
class {{ entity_class }}Repository extends EntityRepository
{% endblock class_definition %}
{
{% block class_body %}
    /**
     * Search for records based on an entity
     *
     * @param {{ entity_class }} $entity
     * @return \Doctrine\ORM\Query
{% include 'crud/actions/author.php.twig' %}
     */
    public function getQuery({{ entity_class }} $entity)
    {
        $queryBuilder = $this->createQueryBuilder('ck');

        $data = array(
    {% for field in fields %}
        '{{ field.columnName }}' => $entity->get{{ field.fieldName|first|upper }}{{ field.fieldName|slice(1) }}(),
    {% endfor %}
    );

        {%- for field in fields %}


        if (!empty($data['{{ field.columnName }}'])) {
            {% if field.type == 'date' -%}
            $queryBuilder
                //->andWhere($queryBuilder->expr()->lte('ck.{{ field.columnName }}', ':{{ field.columnName }}'))
                ->andWhere($queryBuilder->expr()->gte('ck.{{ field.columnName }}', ':{{ field.columnName }}'))
                ->setParameter('{{ field.columnName }}', $data['{{ field.columnName }}'])
            ;
            {%- elseif field.type == 'string' -%}

                {%- if field.length <= 2 -%}
            $queryBuilder
                ->andWhere($queryBuilder->expr()->eq('ck.{{ field.columnName }}', ':{{ field.columnName }}'))
                ->setParameter('{{ field.columnName }}', $data['{{ field.columnName }}'])
            ;

                {%- else -%}
            $queryBuilder
                ->andWhere($queryBuilder->expr()->like('ck.{{ field.columnName }}', ':{{ field.columnName }}'))
                ->setParameter('{{ field.columnName }}', "%{$data['{{ field.columnName }}']}%")
            ;

                {%- endif %}
            {% else -%}
            $queryBuilder
                ->andWhere($queryBuilder->expr()->eq('ck.{{ field.columnName }}', ':{{ field.columnName }}'))
                ->setParameter('{{ field.columnName }}', $data['{{ field.columnName }}'])
            ;

            {%- endif %}

        }
        {%- endfor %}


        return $queryBuilder
            ->orderBy('ck.id', 'ASC')
            ->getQuery()
        ;
    }
{% endblock class_body %}
}
